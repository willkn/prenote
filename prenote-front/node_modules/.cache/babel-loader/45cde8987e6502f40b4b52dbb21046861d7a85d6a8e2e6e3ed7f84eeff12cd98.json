{"ast":null,"code":"import axios from 'axios';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nexport default {\n  data() {\n    return {\n      prenote1Contents: '',\n      prenote2Contents: ''\n    };\n  },\n  methods: {\n    handlePrenote1Upload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.prenote1Contents = reader.result;\n      };\n      reader.readAsText(file);\n    },\n    handlePrenote2Upload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.prenote2Contents = reader.result;\n      };\n      reader.readAsText(file);\n    },\n    submit: function () {\n      axios.post('http://localhost:5000/prenote', {\n        prenote1: this.prenote1Contents,\n        prenote2: this.prenote2Contents\n      }, {\n        responseType: 'blob' // indicate that you are expecting a binary response\n      }).then(function (response) {\n        const csvFile = new Blob([response.data], {\n          type: 'text/csv'\n        });\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          const csvData = event.target.result;\n\n          // Create a new jsPDF instance\n          const doc = new jsPDF();\n\n          // Convert the CSV data into an array of arrays\n          const rows = csvData.split('\\n').map(row => row.split(','));\n\n          // Define the table headers\n          const headers = rows.shift();\n\n          // Define the table configuration\n          const tableConfig = {\n            head: [headers],\n            // Use the headers as the table header\n            body: rows,\n            styles: {\n              textColor: 'black'\n            },\n            alternateRowStyles: {\n              fillColor: '#D3D3D3'\n            },\n            // Use the remaining rows as the table body\n\n            didDrawCell: data => {\n              const cellText = data.cell.text;\n              const highlightText = 'BILLY'; // Specify the text to highlight\n\n              if (cellText.includes(highlightText)) {\n                const cellWidth = data.cell.width;\n                const cellHeight = data.cell.height;\n                const cellX = data.cursor.x;\n                const cellY = data.cursor.y;\n\n                // Apply the highlight color\n                data.doc.setFillColor('#FFFF00'); // Set the highlight color\n\n                // Lower the rendering order\n                data.doc.addContent('q'); // Save the current graphics state\n\n                // Draw a rectangle as the highlight background\n                data.doc.rect(cellX, cellY, cellWidth, cellHeight, 'F');\n\n                // Restore the rendering order\n                data.doc.addContent('Q'); // Restore the previous graphics state\n              }\n            }\n          };\n\n          // Generate the table in the PDF document\n          doc.autoTable(tableConfig);\n\n          // Save the PDF or open it in a new browser tab\n          doc.save('table.pdf');\n        };\n        reader.readAsText(csvFile);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","jsPDF","data","prenote1Contents","prenote2Contents","methods","handlePrenote1Upload","event","file","target","files","reader","FileReader","onload","result","readAsText","handlePrenote2Upload","submit","post","prenote1","prenote2","responseType","then","response","csvFile","Blob","type","csvData","doc","rows","split","map","row","headers","shift","tableConfig","head","body","styles","textColor","alternateRowStyles","fillColor","didDrawCell","cellText","cell","text","highlightText","includes","cellWidth","width","cellHeight","height","cellX","cursor","x","cellY","y","setFillColor","addContent","rect","autoTable","save","catch","error","console","log"],"sources":["/home/will/workspace/prenote/prenote-front/src/components/HomePage.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>PRENOTE</h1>\n\n    <label for=\"prenote1\">Prenote 1:</label>\n    <input type=\"file\" id=\"prenote1\" @change=\"handlePrenote1Upload\">\n\n    <label for=\"prenote2\">Prenote 2:</label>\n    <input type=\"file\" id=\"prenote2\" @change=\"handlePrenote2Upload\">\n    <br>\n    <button @click=\"submit\">submit</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nexport default {\n  data() {\n    return {\n      prenote1Contents: '',\n      prenote2Contents: '',\n    }\n  },\n  methods: {\n    handlePrenote1Upload(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        this.prenote1Contents = reader.result\n      }\n      reader.readAsText(file)\n    },\n    handlePrenote2Upload(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        this.prenote2Contents = reader.result\n      }\n      reader.readAsText(file)\n    },\n\n    submit: function () {\n      axios.post('http://localhost:5000/prenote', {\n        prenote1: this.prenote1Contents,\n        prenote2: this.prenote2Contents\n      }, {\n        responseType: 'blob' // indicate that you are expecting a binary response\n      })\n        .then(function (response) {\n          const csvFile = new Blob([response.data], { type: 'text/csv' });\n\n          const reader = new FileReader();\n          reader.onload = function (event) {\n            const csvData = event.target.result;\n\n            // Create a new jsPDF instance\n            const doc = new jsPDF();\n\n            // Convert the CSV data into an array of arrays\n            const rows = csvData.split('\\n').map(row => row.split(','));\n\n            // Define the table headers\n            const headers = rows.shift();\n\n            // Define the table configuration\n            const tableConfig = {\n              head: [headers], // Use the headers as the table header\n              body: rows,\n              styles: { textColor: 'black' },\n              alternateRowStyles: { fillColor: '#D3D3D3' }, // Use the remaining rows as the table body\n\n              didDrawCell: (data) => {\n                const cellText = data.cell.text;\n                const highlightText = 'BILLY'; // Specify the text to highlight\n\n                if (cellText.includes(highlightText)) {\n                  const cellWidth = data.cell.width;\n                  const cellHeight = data.cell.height;\n                  const cellX = data.cursor.x;\n                  const cellY = data.cursor.y;\n\n                  // Apply the highlight color\n                  data.doc.setFillColor('#FFFF00'); // Set the highlight color\n\n                  // Lower the rendering order\n                  data.doc.addContent('q'); // Save the current graphics state\n\n                  // Draw a rectangle as the highlight background\n                  data.doc.rect(cellX, cellY, cellWidth, cellHeight, 'F');\n\n                  // Restore the rendering order\n                  data.doc.addContent('Q'); // Restore the previous graphics state\n                }\n              },\n\n            };\n\n            // Generate the table in the PDF document\n            doc.autoTable(tableConfig);\n\n            // Save the PDF or open it in a new browser tab\n            doc.save('table.pdf');\n          };\n\n          reader.readAsText(csvFile);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n}\n</script>\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}