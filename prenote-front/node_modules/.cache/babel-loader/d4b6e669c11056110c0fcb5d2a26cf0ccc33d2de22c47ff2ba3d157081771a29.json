{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      prenote1Contents: '',\n      prenote2Contents: ''\n    };\n  },\n  methods: {\n    handlePrenote1Upload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.prenote1Contents = reader.result;\n      };\n      reader.readAsText(file);\n    },\n    handlePrenote2Upload(event) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.prenote2Contents = reader.result;\n      };\n      reader.readAsText(file);\n    },\n    submit() {\n      console.log(this.prenote1Contents);\n      console.log(this.prenote2Contents);\n      // perform other actions with the uploaded CSV data\n    },\n\n    csv_diff(file1, file2, output_file) {\n      const csv = require('csv-parser');\n      const fs = require('fs');\n      const createCsvWriter = require('csv-writer').createObjectCsvWriter;\n      const stream1 = fs.createReadStream(file1).pipe(csv());\n      const stream2 = fs.createReadStream(file2).pipe(csv());\n      const csvWriter = createCsvWriter({\n        path: output_file,\n        header: []\n      });\n      let rows1 = [];\n      let rows2 = [];\n\n      // Read the header from file1 and write it to the output file\n      stream1.on('headers', headers => {\n        csvWriter.writeRecords([headers]);\n      });\n      stream1.on('data', row => {\n        rows1.push(row);\n      });\n      stream2.on('data', row => {\n        rows2.push(row);\n      });\n      stream2.on('end', () => {\n        let dict1 = {};\n        let dict2 = {};\n        for (let row of rows1) {\n          if (row) {\n            dict1[row[Object.keys(row)[0]]] = row;\n          }\n        }\n        for (let row of rows2) {\n          if (row) {\n            dict2[row[Object.keys(row)[0]]] = row;\n          }\n        }\n\n        // Find the differences between the two files\n        let diff = [];\n        for (let item in dict1) {\n          if (!(item in dict2)) {\n            diff.push(dict1[item]);\n          } else if (JSON.stringify(dict1[item]) !== JSON.stringify(dict2[item])) {\n            diff.push(dict1[item]);\n          }\n        }\n        for (let item in dict2) {\n          if (!(item in dict1)) {\n            diff.push(dict2[item]);\n          }\n        }\n        csvWriter.writeRecords(diff);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","prenote1Contents","prenote2Contents","methods","handlePrenote1Upload","event","file","target","files","reader","FileReader","onload","result","readAsText","handlePrenote2Upload","submit","console","log","csv_diff","file1","file2","output_file","csv","require","fs","createCsvWriter","createObjectCsvWriter","stream1","createReadStream","pipe","stream2","csvWriter","path","header","rows1","rows2","on","headers","writeRecords","row","push","dict1","dict2","Object","keys","diff","item","JSON","stringify"],"sources":["/home/will/workspace/prenote/prenote-front/src/components/HomePage.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>PRENOTE</h1>\n\n    <label for=\"prenote1\">Prenote 1:</label>\n    <input type=\"file\" id=\"prenote1\" @change=\"handlePrenote1Upload\">\n\n    <label for=\"prenote2\">Prenote 2:</label>\n    <input type=\"file\" id=\"prenote2\" @change=\"handlePrenote2Upload\">\n    <br>\n    <button @click=\"submit\">submit</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      prenote1Contents: '',\n      prenote2Contents: '',\n    }\n  },\n  methods: {\n    handlePrenote1Upload(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        this.prenote1Contents = reader.result\n      }\n      reader.readAsText(file)\n    },\n    handlePrenote2Upload(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        this.prenote2Contents = reader.result\n      }\n      reader.readAsText(file)\n    },\n    submit() {\n      console.log(this.prenote1Contents)\n      console.log(this.prenote2Contents)\n      // perform other actions with the uploaded CSV data\n    },\n\n    csv_diff(file1, file2, output_file) {\n      const csv = require('csv-parser');\n      const fs = require('fs');\n      const createCsvWriter = require('csv-writer').createObjectCsvWriter;\n\n\n\n      const stream1 = fs.createReadStream(file1).pipe(csv());\n      const stream2 = fs.createReadStream(file2).pipe(csv());\n      const csvWriter = createCsvWriter({\n        path: output_file,\n        header: [],\n      });\n\n      let rows1 = [];\n      let rows2 = [];\n\n      // Read the header from file1 and write it to the output file\n      stream1.on('headers', (headers) => {\n        csvWriter.writeRecords([headers]);\n      });\n\n      stream1.on('data', (row) => {\n        rows1.push(row);\n      });\n\n      stream2.on('data', (row) => {\n        rows2.push(row);\n      });\n\n      stream2.on('end', () => {\n        let dict1 = {};\n        let dict2 = {};\n\n        for (let row of rows1) {\n          if (row) {\n            dict1[row[Object.keys(row)[0]]] = row;\n          }\n        }\n\n        for (let row of rows2) {\n          if (row) {\n            dict2[row[Object.keys(row)[0]]] = row;\n          }\n        }\n\n        // Find the differences between the two files\n        let diff = [];\n        for (let item in dict1) {\n          if (!(item in dict2)) {\n            diff.push(dict1[item]);\n          } else if (JSON.stringify(dict1[item]) !== JSON.stringify(dict2[item])) {\n            diff.push(dict1[item]);\n          }\n        }\n\n        for (let item in dict2) {\n          if (!(item in dict1)) {\n            diff.push(dict2[item]);\n          }\n        }\n\n        csvWriter.writeRecords(diff);\n      });\n    }\n\n\n  }\n}\n</script>\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}