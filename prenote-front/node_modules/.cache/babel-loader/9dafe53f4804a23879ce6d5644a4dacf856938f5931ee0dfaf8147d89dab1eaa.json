{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-df02a584\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"PRENOTE\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"prenote1\"\n}, \"Prenote 1:\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"prenote2\"\n}, \"Prenote 2:\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _hoisted_3, _createElementVNode(\"input\", {\n    type: \"file\",\n    id: \"prenote1\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handlePrenote1Upload && $options.handlePrenote1Upload(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _hoisted_4, _createElementVNode(\"input\", {\n    type: \"file\",\n    id: \"prenote2\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.handlePrenote2Upload && $options.handlePrenote2Upload(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _hoisted_5, _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.submit && $options.submit(...args))\n  }, \"submit\")]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","type","id","onChange","_cache","args","$options","handlePrenote1Upload","_hoisted_4","handlePrenote2Upload","_hoisted_5","onClick","submit"],"sources":["/home/will/workspace/prenote/prenote-front/src/components/HomePage.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>PRENOTE</h1>\n\n    <label for=\"prenote1\">Prenote 1:</label>\n    <input type=\"file\" id=\"prenote1\" @change=\"handlePrenote1Upload\">\n\n    <label for=\"prenote2\">Prenote 2:</label>\n    <input type=\"file\" id=\"prenote2\" @change=\"handlePrenote2Upload\">\n    <br>\n    <button @click=\"submit\">submit</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nexport default {\n  data() {\n    return {\n      prenote1Contents: '',\n      prenote2Contents: '',\n    }\n  },\n  methods: {\n    handlePrenote1Upload(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        this.prenote1Contents = reader.result\n      }\n      reader.readAsText(file)\n    },\n    handlePrenote2Upload(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        this.prenote2Contents = reader.result\n      }\n      reader.readAsText(file)\n    },\n\n    submit: function () {\n      axios.post('http://localhost:5000/prenote', {\n        prenote1: this.prenote1Contents,\n        prenote2: this.prenote2Contents\n      }, {\n        responseType: 'blob' // indicate that you are expecting a binary response\n      })\n        .then(function (response) {\n          const csvFile = new Blob([response.data], { type: 'text/csv' });\n\n          const reader = new FileReader();\n          reader.onload = function (event) {\n            const csvData = event.target.result;\n\n            // Create a new jsPDF instance\n            const doc = new jsPDF();\n\n            // Convert the CSV data into an array of arrays\n            const rows = csvData.split('\\n').map(row => row.split(','));\n\n            // Define the table headers\n            const headers = rows.shift();\n\n            // Define the table configuration\n            const tableConfig = {\n              head: [headers], // Use the headers as the table header\n              body: rows,\n              styles: { textColor: 'black' },\n              alternateRowStyles: { fillColor: '#D3D3D3' }, // Use the remaining rows as the table body\n\n              didDrawCell: (data) => {\n                const cellText = data.cell.text;\n                const highlightTexts = ['BILLY', 'JACK']; // Specify the texts to highlight\n\n                // const cellWidth = data.cell.width;\n                const cellHeight = data.cell.height;\n                const cellX = data.cell.x;\n                const cellY = data.cell.y;\n\n                const originalTextColor = data.doc.getTextColor(); // Store the original text color\n\n                highlightTexts.forEach((highlightText) => {\n                  const highlightIndex = cellText.indexOf(highlightText);\n                  if (highlightIndex !== -1) {\n                    const beforeText = cellText.slice(0, highlightIndex);\n                    const afterText = cellText.slice(highlightIndex + highlightText.length);\n\n                    data.doc.setTextColor(originalTextColor); // Set the text color for the non-highlighted text\n                    data.doc.text(beforeText, cellX, cellY + 5); // Display the non-highlighted text\n\n                    data.doc.setFillColor('#FFFF00'); // Set the highlight color\n                    data.doc.setTextColor('#000000'); // Set the text color for highlighted text\n\n                    const highlightX = cellX + data.doc.getTextWidth(beforeText); // Calculate the x coordinate for the highlighted text\n                    const highlightY = cellY + 5; // Use the same y coordinate as the non-highlighted text\n\n                    data.doc.rect(highlightX, highlightY, data.doc.getTextWidth(highlightText), cellHeight, 'F'); // Draw the highlight rectangle\n                    data.doc.text(highlightText, highlightX, highlightY + (cellHeight / 2), { align: 'left', baseline: 'middle' }); // Display the highlighted text\n\n                    data.doc.setTextColor(originalTextColor); // Set the text color for the remaining text\n                    data.doc.text(afterText, highlightX + data.doc.getTextWidth(highlightText), cellY + 5); // Display the remaining text\n                  }\n                });\n              },\n\n\n\n            };\n\n            // Generate the table in the PDF document\n            doc.autoTable(tableConfig);\n\n            // Save the PDF or open it in a new browser tab\n            doc.save('table.pdf');\n          };\n\n          reader.readAsText(csvFile);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n}\n</script>\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAO;gEAChBC,mBAAA,CAAgB,YAAZ,SAAO;gEAEXA,mBAAA,CAAwC;EAAjCC,GAAG,EAAC;AAAU,GAAC,YAAU;gEAGhCD,mBAAA,CAAwC;EAAjCC,GAAG,EAAC;AAAU,GAAC,YAAU;gEAEhCD,mBAAA,CAAI;;;uBARNE,mBAAA,CAUM,OAVNC,UAUM,GATJC,UAAgB,EAEhBC,UAAwC,EACxCL,mBAAA,CAAgE;IAAzDM,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,UAAU;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,oBAAA,IAAAD,QAAA,CAAAC,oBAAA,IAAAF,IAAA,CAAoB;qCAE9DG,UAAwC,EACxCb,mBAAA,CAAgE;IAAzDM,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,UAAU;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,oBAAA,IAAAH,QAAA,CAAAG,oBAAA,IAAAJ,IAAA,CAAoB;qCAC9DK,UAAI,EACJf,mBAAA,CAAuC;IAA9BgB,OAAK,EAAAP,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAM,MAAA,IAAAN,QAAA,CAAAM,MAAA,IAAAP,IAAA,CAAM;KAAE,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}